package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Archive;
import com.example.jdbcdemo.domain.Resource;

public class ResourceManager {
	private Connection connection;
	private Statement statement;
	
	private PreparedStatement addResourceStmt;
	private PreparedStatement updateResourceToArchiveStmt;
	private PreparedStatement addArchiveStmt;
	private PreparedStatement getAllArchivesStmt;
	private String createResourceTable = "CREATE TABLE Resource(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), author varchar(20),isbn integer, date integer, teamnumber integer)";
	private PreparedStatement getAllResourcesStmt;
	private PreparedStatement getAllResourcesAfterStmt;
	private PreparedStatement deleteAllResourcesStmt;
	private PreparedStatement deleteAllArchivesStmt;
	private PreparedStatement deleteResourceStmt;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	public ResourceManager() {
		super();
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Resource".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists)
				statement.executeUpdate(createResourceTable);
			
			addResourceStmt = connection.prepareStatement("INSERT INTO Resource (name, author, isbn, date) VALUES (?,?,?,?)");
			updateResourceToArchiveStmt = connection.prepareStatement("UPDATE Resource SET teamnumber = ? WHERE isbn = ? ");
			addArchiveStmt = connection.prepareStatement("INSERT INTO Archive (name, teamNumber, phone) VALUES (?,?,?)");
			getAllArchivesStmt = connection
					.prepareStatement("SELECT id, name, teamNumber, phone From Archive");
			getAllResourcesStmt = connection.prepareStatement("SELECT id, name, author, isbn, date, teamnumber FROM Resource");
			getAllResourcesAfterStmt = connection.prepareStatement("SELECT id, name, author, isbn, date, teamnumber FROM Resource Where date > ?");
			deleteAllArchivesStmt = connection
					.prepareStatement("DELETE FROM Archive");
			deleteResourceStmt = connection.prepareStatement("DELETE FROM Resource WHERE teamnumber = ?");
			deleteAllResourcesStmt = connection.prepareStatement("DELETE FROM Resource");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public int addResource(Resource resource){
		int count = 0;
		try {
			addResourceStmt.setString(1, resource.getName());
			addResourceStmt.setString(2, resource.getAuthor());
			addResourceStmt.setInt(3, resource.getIsbn());
			addResourceStmt.setInt(4, resource.getDate());
			count = addResourceStmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return count;
	}
	public void clearResources() {
		try {
			deleteAllResourcesStmt.executeUpdate();
			deleteAllArchivesStmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public int countRows(Archive archive){
		int count = 0;
		Resource tmpR = new Resource();
		try {
			ResultSet rs = getAllResourcesStmt.executeQuery();
			while (rs.next()){
				tmpR.setTeamNumber(rs.getInt("teamNumber"));
				if(((Integer)tmpR.getTeamNumber()).equals(archive.getTeamNumber())){
					count++;
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return count;
	}
	
	public List<Resource> getAllResources() {
		List<Resource> resources = new ArrayList<Resource>();
		try {
			ResultSet rs = getAllResourcesStmt.executeQuery();
			while (rs.next()){
				Resource r = new Resource();
				r.setId(rs.getInt("id"));
				r.setName(rs.getString("name"));
				r.setAuthor(rs.getString("author"));
				r.setIsbn(rs.getInt("isbn"));
				r.setDate(rs.getInt("date"));
				r.setTeamNumber(rs.getInt("teamNumber"));
				resources.add(r);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return resources;
	}
	
	public int addResourceToArchive(Resource r, Archive a) {
		int count = 0;
		int resourceExists = 0;
		try {
		connection.setAutoCommit(true);
		ResultSet rsA = getAllResourcesStmt.executeQuery();
		while (rsA.next()){
			if(((Integer)r.getIsbn()).equals((Integer)rsA.getInt("isbn"))){
				resourceExists = 1;
				break;
			}
		}
		if( resourceExists == 1 ){
			ResultSet rs = getAllArchivesStmt.executeQuery();
			while (rs.next()){
				Archive tmpA = new Archive();
				tmpA.setTeamNumber(rs.getInt("teamNumber"));
				if(((Integer)tmpA.getTeamNumber()).equals(a.getTeamNumber())){
					updateResourceToArchiveStmt.setInt(1, a.getTeamNumber());
					updateResourceToArchiveStmt.setInt(2, r.getIsbn());
					count = updateResourceToArchiveStmt.executeUpdate();
				}
			}
		}
		else {
			try {
				addResourceStmt.setString(1, r.getName());
				addResourceStmt.setString(2, r.getAuthor());
				addResourceStmt.setInt(3, r.getIsbn());
				addResourceStmt.setInt(4, r.getDate());
				addResourceStmt.executeUpdate();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (count == 0){
				addArchiveStmt.setString(1, a.getName());
				addArchiveStmt.setInt(2, a.getTeamNumber());
				addArchiveStmt.setString(3, a.getPhone());
				addArchiveStmt.executeUpdate();
				updateResourceToArchiveStmt.setInt(1, a.getTeamNumber());
				updateResourceToArchiveStmt.setInt(2, r.getIsbn());
				count = updateResourceToArchiveStmt.executeUpdate();
			
		}
		connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
		return count;
	}
	
	public int deleteResourceFromArchive(Resource r, Archive a) {
		int count = 0;
		int resourceExists = 0;
		try {
		connection.setAutoCommit(true); // true - kazda transakcja osobna
		ResultSet rsA = getAllResourcesStmt.executeQuery();
		while (rsA.next()){
			if(((Integer)r.getIsbn()).equals((Integer)rsA.getInt("isbn"))){
				resourceExists = 1;
				break;
			}
		}
		if( resourceExists == 1 ){
			ResultSet rs = getAllArchivesStmt.executeQuery();
			while (rs.next()){
				Archive tmpA = new Archive();
				tmpA.setTeamNumber(rs.getInt("teamNumber"));
				if(((Integer)tmpA.getTeamNumber()).equals(a.getTeamNumber())){
					deleteResourceStmt.setInt(1, tmpA.getTeamNumber());
					deleteResourceStmt.executeUpdate();
					addResourceStmt.setString(1, r.getName());
					addResourceStmt.setString(2, r.getAuthor());
					addResourceStmt.setInt(3, r.getIsbn());
					addResourceStmt.setInt(4, r.getDate());
					count = addResourceStmt.executeUpdate();
				}
			}
		}
		else {
			System.out.println("Resource don't exists!!!");
		}
		if (count == 0){
			System.out.println("Archive don't exists!!!");
		}
		connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
		return count;
	}
	
	public int selectResourceFromArchive(Archive a) {
		int count = 0;
		int archiveExists = 0;
		try {
		connection.setAutoCommit(true); // true - kazda transakcja osobna
		ResultSet rsA = getAllArchivesStmt.executeQuery();
		while (rsA.next()){
			if(((Integer)rsA.getInt("teamNumber")).equals((Integer)a.getTeamNumber())){
				archiveExists = 1;
				break;
			}
		}
		if( archiveExists == 1 ){
			ResultSet rs = getAllResourcesStmt.executeQuery();
			while (rs.next()){
				Resource tmpR = new Resource();
				tmpR.setTeamNumber(rs.getInt("teamNumber"));
				if(((Integer)tmpR.getTeamNumber()).equals(a.getTeamNumber())){
					count ++;
				}
			}
		}
		else {
			System.out.println("Archive don't exists!!!");
		}
		if (count == 0){
			System.out.println("Archive don't have any resources!!!");
		}
		connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
		return count;
	}

	public int selectResourceFromArchiveAfter(Archive a, int tmpDate) {
		int count = 0;
		int archiveExists = 0;
		try {
		connection.setAutoCommit(true); 
		ResultSet rsA = getAllArchivesStmt.executeQuery();
		while (rsA.next()){
			if(((Integer)rsA.getInt("teamNumber")).equals((Integer)a.getTeamNumber())){
				archiveExists = 1;
				break;
			}
		}
		if( archiveExists == 1 ){
			getAllResourcesAfterStmt.setInt(1, tmpDate);
			ResultSet rs = getAllResourcesAfterStmt.executeQuery();
			while (rs.next()){
				Resource tmpR = new Resource();
				tmpR.setTeamNumber(rs.getInt("teamNumber"));
				if(((Integer)tmpR.getTeamNumber()).equals(a.getTeamNumber())){
					count ++;
				}
			}
		}
		else {
			System.out.println("Archive don't exists!!!");
		}
		if (count == 0){
			System.out.println("Archive don't have any resources!!!");
		}
		//if (true) throw new SQLException("Bo mi siÄ™ nie podoba!");
		connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
		return count;
	}
	
	public Connection getConnection() {
		return connection;
	}

	public void setConnection(Connection connection) {
		this.connection = connection;
	}
}
