package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Resource;

public class ResourceManager {
	private Connection connection;
	private Statement statement;
	
	private PreparedStatement addResourceStmt;
	private String createResourceTable = "CREATE TABLE Resource(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), author varchar(20), date integer)";
	private PreparedStatement getAllResourcesStmt;
	private PreparedStatement deleteAllResourcesStmt;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	public ResourceManager() {
		super();
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Resource".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists)
				statement.executeUpdate(createResourceTable);
			
			addResourceStmt = connection.prepareStatement("INSERT INTO Resource (name, author, date) VALUES (?,?,?)");
			getAllResourcesStmt = connection.prepareStatement("SELECT id, name, author, date FROM Resource");
			deleteAllResourcesStmt = connection.prepareStatement("DELETE FROM Resource");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public Connection getConnection() {
		return connection;
	}
	public void setConnection(Connection connection) {
		this.connection = connection;
	}
	public Statement getStatement() {
		return statement;
	}
	public void setStatement(Statement statement) {
		this.statement = statement;
	}
	public PreparedStatement getAddResourceStmt() {
		return addResourceStmt;
	}
	public void setAddResourceStmt(PreparedStatement addResourceStmt) {
		this.addResourceStmt = addResourceStmt;
	}
	public String getCreateResourceTable() {
		return createResourceTable;
	}
	public void setCreateResourceTable(String createResourceTable) {
		this.createResourceTable = createResourceTable;
	}
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
	
	public int addResource(Resource resource){
		int count = 0;
		try {
			addResourceStmt.setString(1, resource.getName());
			addResourceStmt.setString(2, resource.getAuthor());
			addResourceStmt.setInt(3, resource.getDate());
			count = addResourceStmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return count;
	}
	public void clearResources() {
		try {
			deleteAllResourcesStmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public List<Resource> getAllResources() {
		List<Resource> resources = new ArrayList<Resource>();
		try {
			ResultSet rs = getAllResourcesStmt.executeQuery();
			while (rs.next()){
				Resource r = new Resource();
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return resources;
	}
	
}
